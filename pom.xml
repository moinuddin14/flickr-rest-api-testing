<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.spotqa</groupId>
    <artifactId>SpotQARestAssuredLibraryDemo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>SpotQARestAssuredLibraryDemo</name>
    <url>http://maven.apache.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--To pass parameters from the command line through mv command use blank tags as below
        <suiteXmlFile></suiteXmlFile>-->
        <suiteXmlFile>testng.xml</suiteXmlFile>
        <!--To pass value from mvn to pom.xml to .java file use mvn test -Denvironment=UAT-->
        <environment></environment>
        <baseuri></baseuri>
        <basepath></basepath>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>6.9.10</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/junit/junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
        </dependency>

        <dependency>
            <groupId>com.jayway.restassured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>2.9.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.scribe/scribe -->
        <dependency>
            <groupId>org.scribe</groupId>
            <artifactId>scribe</artifactId>
            <version>1.3.7</version>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>2.53.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.codeborne/phantomjsdriver -->
        <dependency>
            <groupId>com.codeborne</groupId>
            <artifactId>phantomjsdriver</artifactId>
            <version>1.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.sikulix</groupId>
            <artifactId>sikulixapi</artifactId>
            <version>1.1.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.7</version>
        </dependency>

        <!--<dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>3.0.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.scribejava</groupId>
            <artifactId>scribejava-core</artifactId>
            <version>2.2.2</version>
        </dependency>-->
        <!--Standalone JsonPath (included if you depend on the rest-assured artifact).
        Makes it easy to parse JSON documents. Note that this JsonPath implementation
        uses Groovy's GPath syntax and is not to be confused with Jayway's other
        JsonPath implementation.-->
        <!--<dependency>
              <groupId>io.rest-assured</groupId>
              <artifactId>json-path</artifactId>
              <version>3.0.1</version>
        </dependency>-->
        <!--Stand-alone XmlPath (included if you depend on the rest-assured artifact).
        Makes it easy to parse XML documents.-->
        <!--<dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>xml-path</artifactId>
            <version>3.0.1</version>
        </dependency>-->
        <!--If you want to validate that a JSON response conforms to a
        Json Schema you can use the json-schema-validator module:-->
        <!--<dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-schema-validator</artifactId>
            <version>3.0.1</version>
            <scope>test</scope>
        </dependency>-->
        <!--If you're using Spring Mvc you can now unit test your controllers
        using the RestAssuredMockMvc API in the spring-mock-mvc module. For
        this to work you need to depend on the spring-mock-mvc module:-->
        <!--<dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>spring-mock-mvc</artifactId>
            <version>3.0.1</version>
            <scope>test</scope>
        </dependency>-->
        <!--If you're using Scala you may leverage the scala-support module.
        For this to work you need to depend on the scala-support module:-->
        <!--<dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>scala-support</artifactId>
            <version>3.0.1</version>
            <scope>test</scope>
        </dependency>-->
    </dependencies>

    <!--Make sure that build is always placed after the dependencies so that the correct dependencies are picked while executing-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <compilerVersion>1.8</compilerVersion>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.17</version>
                <configuration>
                    <systemPropertyVariables>
                        <environment>{env.USER}</environment>
                        <baseuri>{base.uri}</baseuri>
                        <basepath>{base.path}</basepath>
                    </systemPropertyVariables>
                    <suiteXmlFiles>
                        <suiteXmlFile>${suiteXmlFile}</suiteXmlFile>
                    </suiteXmlFiles>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!--Reporting Plugin for Coberture Code Coverage tool!-->
    <reporting><plugins><!-- Normally, we take off the dependency report, saves time. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                </configuration>
            </plugin>

            <!--integrate maven-cobertura-plugin to project site-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <formats>
                        <format>html</format>
                        <format>xml</format>
                    </formats>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
</project>